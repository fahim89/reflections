Reflections 2 - Fahim Kadhi
Lesson 1 - Udacity - How to Use Git and Github

This is the first lesson I've finished in Udacity.
I'm loving the positive reinforcement I'm getting from immediately
implementing what I've learned. The instructor asked me to keep
the characters on each line short so that when I'm doing 
a diff comparison, the program will be able to pinpoint exactly
where the differences/error are.
-------------------------------------------------------------------------
4th December 2016 -- 1st Reflection
What happens when you initialize a repository? Why do you need to do it?
When you initialize a Git repository there is a .git file created within
the folder. You need to do it to keep track of all the changes to your 
code. And Git is a great way to do that.
-------------------------------------------------------------------------
4th December 2016 -- 2nd Reflection
How is the staging area different from the working directory and the 
repository? What value do you think it offers?
The staging area allows you to select which files to add to your new
repository, considering that you probably don't want to all the files in
the working directory to the repository. Remember that it's better to
keep each commit small and not to have too many changes per each commit.
-------------------------------------------------------------------------
21st December 2016 -- 3rd Reflection
How can you use the staging area to make sure you have one commit per 
logical change?
You can use the staging area to add one file at a time to each commit.
Keeping the commits as small as possible is a good programming practice.
-------------------------------------------------------------------------
22nd December 2016 -- 4th Reflection
What are some situations when branches would be helpful in keeping your 
history organized? How would branches help?
Branches help you experiment with your master code while keeping the
original untouched.
-------------------------------------------------------------------------
22nd December 2016 -- 5th Reflection
How do the diagrams help you visualize the branch structure?
It does exactly that.
-------------------------------------------------------------------------
22nd December 2016 -- 6th Reflection
What is the result of merging two branches together? Why do we represent 
it in the diagram the way we do?
When you merge two branches together, git intelligently adds the lines of
code that it thinks is right.
Not sure what it does with the conflicts yet.
-------------------------------------------------------------------------
22nd December 2016 -- 7th Reflection
What are the pros and cons of Gitâ€™s automatic merging vs. always doing 
merges manually?
Pros:
Automotive is hassle free
Quick
Cons:
It might make decisions for you that you might not agree with.
-------------------------------------------------------------------------
